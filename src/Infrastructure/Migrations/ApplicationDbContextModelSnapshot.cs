// <auto-generated />
using System;
using Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.DeliveryPeople.DeliveryPerson", b =>
                {
                    b.Property<string>("Identifier")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("identifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("DriversLicenseImage")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("drivers_license_image");

                    b.Property<string>("DriversLicenseNumber")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("drivers_license_number");

                    b.Property<string>("DriversLicenseType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("drivers_license_type");

                    b.Property<string>("Ein")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ein");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Identifier")
                        .HasName("pk_delivery_people");

                    b.HasIndex("DriversLicenseNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_delivery_people_drivers_license_number");

                    b.HasIndex("Ein")
                        .IsUnique()
                        .HasDatabaseName("ix_delivery_people_ein");

                    b.ToTable("delivery_people", "public");
                });

            modelBuilder.Entity("Domain.Motorcycles.Motorcycle", b =>
                {
                    b.Property<string>("Identifier")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("identifier");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("model");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("plate");

                    b.Property<int?>("Year")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.HasKey("Identifier")
                        .HasName("pk_motorcycles");

                    b.HasIndex("Plate")
                        .IsUnique()
                        .HasDatabaseName("ix_motorcycles_plate");

                    b.ToTable("motorcycles", "public");
                });

            modelBuilder.Entity("Domain.Rents.Rent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal?>("DailyPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("daily_price");

                    b.Property<string>("DeliveryPersonId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("delivery_person_id");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<decimal?>("FineValue")
                        .HasColumnType("numeric")
                        .HasColumnName("fine_value");

                    b.Property<DateTime>("ForecastDateEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("forecast_date_end");

                    b.Property<string>("MotorcycleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("motorcycle_id");

                    b.Property<int?>("Plan")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("plan");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("return_date");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<decimal?>("TotalValue")
                        .HasColumnType("numeric")
                        .HasColumnName("total_value");

                    b.HasKey("Id")
                        .HasName("pk_rents");

                    b.HasIndex("DeliveryPersonId")
                        .HasDatabaseName("ix_rents_delivery_person_id");

                    b.HasIndex("MotorcycleId")
                        .HasDatabaseName("ix_rents_motorcycle_id");

                    b.ToTable("rents", "public");
                });

            modelBuilder.Entity("Domain.StoredEvents.StoredEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Data")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("data");

                    b.Property<string>("EventType")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("event_type");

                    b.HasKey("Id")
                        .HasName("pk_stored_events");

                    b.ToTable("stored_events", "public");
                });

            modelBuilder.Entity("Domain.Rents.Rent", b =>
                {
                    b.HasOne("Domain.DeliveryPeople.DeliveryPerson", "DeliveryPerson")
                        .WithMany("Rents")
                        .HasForeignKey("DeliveryPersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_rents_delivery_people_delivery_person_id");

                    b.HasOne("Domain.Motorcycles.Motorcycle", "Motorcycle")
                        .WithMany("Rents")
                        .HasForeignKey("MotorcycleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_rents_motorcycles_motorcycle_id");

                    b.Navigation("DeliveryPerson");

                    b.Navigation("Motorcycle");
                });

            modelBuilder.Entity("Domain.DeliveryPeople.DeliveryPerson", b =>
                {
                    b.Navigation("Rents");
                });

            modelBuilder.Entity("Domain.Motorcycles.Motorcycle", b =>
                {
                    b.Navigation("Rents");
                });
#pragma warning restore 612, 618
        }
    }
}
